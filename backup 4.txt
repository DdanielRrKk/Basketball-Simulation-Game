#include<iostream>
#include<string>
#include<vector>
#include<fstream>
#include<iterator>
#include<algorithm>
#include<stdlib.h>
#include<sstream>
#include<filesystem>

using namespace std;
namespace fs = std::filesystem;



// Class for making a basketball Player
class Player {
private:
	string mp_name;
	int mp_age;
	int mp_overall;
	int mp_insideScoring;
	int mp_outsideScoring;
	int mp_freeThrow;
	int mp_passing;
	int mp_rebounding;
	int mp_stealing;
	int mp_blocking;
	int mp_defending;

	string mp_position;
	string mp_salary;
	int mp_yearsPro;

public:
	void setPlayerOverall() { mp_overall = (mp_insideScoring + mp_outsideScoring + mp_freeThrow + mp_passing + mp_rebounding + mp_stealing + mp_blocking + mp_defending) / 8; }

	// setters
	void setPlayerName(const string val) { mp_name = val; }
	void setPlayerAge(const int val) { mp_age = val; }
	void setPlayerInsideScoringRating(const int val) { mp_insideScoring = val; setPlayerOverall(); }
	void setPlayerOutsideScoringRating(const int val) { mp_outsideScoring = val; setPlayerOverall(); }
	void setPlayerFreeThrowRating(const int val) { mp_freeThrow = val; setPlayerOverall(); }
	void setPlayerPassingRating(const int val) { mp_passing = val; setPlayerOverall(); }
	void setPlayerReboundingRating(const int val) { mp_rebounding = val; setPlayerOverall(); }
	void setPlayerStealingRating(const int val) { mp_stealing = val; setPlayerOverall(); }
	void setPlayerBlockingRating(const int val) { mp_blocking = val; setPlayerOverall(); }
	void setPlayerDefendingRating(const int val) { mp_defending = val; setPlayerOverall(); }

	void setPlayerPosition(const string val) { mp_position = val; }
	void setPlayerSalary(const string val) { mp_salary = val; }
	void setPlayerYearsPro(const int val) { mp_yearsPro = val; }

	// getters
	string getPlayerName() const { return mp_name; }
	int getPlayerAge() const { return mp_age; }
	int getPlayerInsideScoringRating() const { return mp_insideScoring; }
	int getPlayerOutsideScoringRating() const { return mp_outsideScoring; }
	int getPlayerFreeThrowRating() const { return mp_freeThrow; }
	int getPlayerPassingRating() const { return mp_passing; }
	int getPlayerReboundingRating() const { return mp_rebounding; }
	int getPlayerStealingRating() const { return mp_stealing; }
	int getPlayerBlockingRating() const { return mp_blocking; }
	int getPlayerDefendingRating() const { return mp_defending; }
	int getPlayerOverall() const { return mp_overall; }

	string getPlayerPosition() const { return mp_position; }
	string getPlayerSalary() const { return mp_salary; }
	int getPlayerYearsPro() const { return mp_yearsPro; }

	int getCalcPlayerOffence() { return (mp_insideScoring + mp_outsideScoring + mp_freeThrow + mp_passing) / 4; }
	int getCalcPlayerDefence() { return (mp_rebounding + mp_stealing + mp_defending + mp_blocking) / 4; }

	// default constructor
	Player() {
		mp_name = " ";
		mp_age = 0;
		mp_overall = 0;
		mp_insideScoring = 0;
		mp_outsideScoring = 0;
		mp_freeThrow = 0;
		mp_passing = 0;
		mp_rebounding = 0;
		mp_stealing = 0;
		mp_blocking = 0;
		mp_defending = 0;

		mp_position = " ";
		mp_salary = " ";
		mp_yearsPro = 0;
	}

	// explicit constructor
	Player(string nmval,int aval, int isval, int osval, int ftval, int psval, int rbval, int stval, int blval, int dfval, string posval, string salval, int yeval) {
		mp_name = nmval;
		mp_age = aval;
		mp_insideScoring = isval;
		mp_outsideScoring = osval;
		mp_freeThrow = ftval;
		mp_passing = psval;
		mp_rebounding = rbval;
		mp_stealing = stval;
		mp_blocking = blval;
		mp_defending = dfval;
		setPlayerOverall();

		mp_position = posval;
		mp_salary = salval;
		mp_yearsPro = yeval;
	}

	// copy constructor
	Player(const Player& p) {
		mp_name = p.getPlayerName();
		mp_age = p.getPlayerAge();
		mp_insideScoring = p.getPlayerInsideScoringRating();
		mp_outsideScoring = p.getPlayerOutsideScoringRating();
		mp_freeThrow = p.getPlayerFreeThrowRating();
		mp_passing = p.getPlayerPassingRating();
		mp_rebounding = p.getPlayerReboundingRating();
		mp_stealing = p.getPlayerStealingRating();
		mp_blocking = p.getPlayerBlockingRating();
		mp_defending = p.getPlayerDefendingRating();
		setPlayerOverall();

		mp_position = p.getPlayerPosition();
		mp_salary = p.getPlayerSalary();
		mp_yearsPro = p.getPlayerYearsPro();
	}

	istream& inputPlayer(istream& in) {
		in >> mp_name;
		in >> mp_age;
		in >> mp_overall;
		in >> mp_insideScoring;
		in >> mp_outsideScoring;
		in >> mp_freeThrow;
		in >> mp_passing;
		in >> mp_rebounding;
		in >> mp_stealing;
		in >> mp_blocking;
		in >> mp_defending;

		in >> mp_position;
		in >> mp_salary;
		in >> mp_yearsPro;
		return in;
	}
	friend istream& operator>>(istream& in, Player& pl) { return pl.inputPlayer(in); }

	ostream& outputPlayer(ostream& out) {
		out << mp_name << " ";
		out << mp_age << " ";
		out << mp_overall << " ";
		out << mp_insideScoring << " ";
		out << mp_outsideScoring << " ";
		out << mp_freeThrow << " ";
		out << mp_passing << " ";
		out << mp_rebounding << " ";
		out << mp_stealing << " ";
		out << mp_blocking << " ";
		out << mp_defending << " ";

		out << mp_position << " ";
		out << mp_salary << " ";
		out << mp_yearsPro << " ";
		return out;
	}
	friend ostream& operator<<(ostream& out, Player& pl) { return pl.outputPlayer(out); }

	friend bool operator==(Player p1, Player p2) {
		return (p1.getPlayerName() == p2.getPlayerName());
	}
	friend bool operator>(Player p1, Player p2) {
		return (p1.getPlayerOverall() > p2.getPlayerOverall());
	}


	void showPlayer() {
		cout << mp_name << " ";
		cout << mp_age << "yo ";
		cout << mp_position << " ";
		cout << mp_overall << " Overall" << " ";
		cout << "Sal: " << mp_salary << "M" << endl;
		cout << "S.INS: " << mp_insideScoring << " ";
		cout << "S.OUT: " << mp_outsideScoring << " ";
		cout << "S.FREE: " << mp_freeThrow << " ";
		cout << "PASS: " << mp_passing << " ";
		cout << "REB: " << mp_rebounding << " ";
		cout << "STL: " << mp_stealing << " ";
		cout << "BLK: " << mp_blocking << " ";
		cout << "DEF: " << mp_defending << endl;
	}

	string salaryForFinances() {
		string str;

		string s = mp_salary;
		s.erase(s.find_last_of("x"), string::npos);

		string m = mp_salary;
		m.erase(0, m.find_last_of("x") + 1);
		for (int i = 0; i < stoi(s); i++) {
			if ((stoi(s) - i) == 1) {
				str = str + m + "M";
			}
			else {
				str = str + m + "M\t";
			}
		}

		return str;
	}
};



// Class for Basketball Teams
class Team {
private:
	string mt_name;
	vector<Player> mt_Players;

	int mt_wins;
	int mt_loses;

public:

	void setTeamName(const string val) { mt_name = val; }
	void setTeamPlayers(const vector<Player> vplay) { mt_Players = vplay; }
	void setTeamWins(const int val) { mt_wins = mt_wins + val; }
	void setTeamLoses(const int val) { mt_loses = mt_loses + val; }

	string getTeamName() const { return mt_name; }
	vector<Player> getTeamPlayers() const { return mt_Players; }
	int getTeamWins() const { return mt_wins; }
	int getTeamLoses() const { return mt_loses; }

	void addPlayerToTeam(Player& p) { Player tp = p; mt_Players.push_back(tp); }

	Team() {
		mt_name = " ";
		mt_Players.clear();
		mt_wins = 0;
		mt_loses = 0;
	}

	Team(string tmval, vector<Player> vplay, int wval, int lval) {
		mt_name = tmval;
		mt_Players = vplay;
		mt_wins = wval;
		mt_loses = lval;
	}

	Team(const Team& tm) {
		mt_name = tm.getTeamName();
		mt_Players = tm.getTeamPlayers();
		mt_wins = tm.getTeamWins();
		mt_loses = tm.getTeamLoses();
	}

	// getters for averages from players
	int getTeamCalcInsideScoring() {
		int res = 0;
		for (auto it = mt_Players.begin(); it != mt_Players.end(); it++) {
			res = res + (*it).getPlayerInsideScoringRating();
		}
		return res / mt_Players.size();
	}

	int getTeamCalcOutsideScoring() {
		int res = 0;
		for (auto it = mt_Players.begin(); it != mt_Players.end(); it++) {
			res = res + (*it).getPlayerOutsideScoringRating();
		}
		return res / mt_Players.size();
	}

	int getTeamCalcFreeThrow() {
		int res = 0;
		for (auto it = mt_Players.begin(); it != mt_Players.end(); it++) {
			res = res + (*it).getPlayerFreeThrowRating();
		}
		return res / mt_Players.size();
	}

	int getTeamCalcPassing() {
		int res = 0;
		for (auto it = mt_Players.begin(); it != mt_Players.end(); it++) {
			res = res + (*it).getPlayerPassingRating();
		}
		return res / mt_Players.size();
	}

	int getTeamCalcRebounding() {
		int res = 0;
		for (auto it = mt_Players.begin(); it != mt_Players.end(); it++) {
			res = res + (*it).getPlayerReboundingRating();
		}
		return res / mt_Players.size();
	}

	int getTeamCalcStealing() {
		int res = 0;
		for (auto it = mt_Players.begin(); it != mt_Players.end(); it++) {
			res = res + (*it).getPlayerStealingRating();
		}
		return res / mt_Players.size();
	}

	int getTeamCalcBlocking() {
		int res = 0;
		for (auto it = mt_Players.begin(); it != mt_Players.end(); it++) {
			res = res + (*it).getPlayerBlockingRating();
		}
		return res / mt_Players.size();
	}

	int getTeamCalcDefending() {
		int res = 0;
		for (auto it = mt_Players.begin(); it != mt_Players.end(); it++) {
			res = res + (*it).getPlayerDefendingRating();
		}
		return res / mt_Players.size();
	}

	int getTeamCalcOverall() {
		int res = 0;
		for (auto it = mt_Players.begin(); it != mt_Players.end(); it++) {
			res = res + (*it).getPlayerOverall();
		}
		return res / mt_Players.size();
	}

	double getTeamCalcSalary() {
		double res = 0.0;
		string sal;
		for (auto it = mt_Players.begin(); it != mt_Players.end(); it++) {
			sal = (*it).getPlayerSalary();
			sal.erase(0, 2);
			res = res + stod(sal);
		}
		return res;
	}


	string salaryForFinances() {
		double y1(0), y2(0), y3(0), y4(0), y5(0);


		for (auto it = mt_Players.begin(); it != mt_Players.end(); it++) {
			string s = (*it).getPlayerSalary();
			s.erase(s.find_last_of("x"), string::npos);

			string m = (*it).getPlayerSalary();
			m.erase(0, m.find_last_of("x") + 1);

			for (int i = 0; i < stoi(s); i++) {
				if (i == 0) {
					y1 = (y1 + stod(m));
				}
				if (i == 1) {
					y2 = (y2 + stod(m));
				}
				if (i == 2) {
					y3 = (y3 + stod(m));
				}
				if (i == 3) {
					y4 = (y4 + stod(m));
				}
				if (i == 4) {
					y5 = (y5 + stod(m));
				}
			}
		}

		string str = to_string(y1) + "M   " + to_string(y2) + "M   " + to_string(y3) + "M   " + to_string(y4) + "M   " + to_string(y5) + "M";
		return str;
	}

};



// function for making a main team from chosen file
void fromFileToTeam(string fname, Team& gameTeam) {
	string line;
	string tempName;
	int rating;
	int i;

	string s = fname;
	s.erase(0, s.find_last_of("\\")+1);
	s.erase(s.find_last_of("."), string::npos);
	gameTeam.setTeamName(s);

	fstream chFile(fname, ios::in);
	if (!chFile) {
		cout << endl << "******* ERROR *******";
		exit(1);
	}

	while (getline(chFile, line)) {
		i = 0;
		stringstream ss(line);
		string word;
		Player tempP;

		while (getline(ss, word, ' ')) {
			if (i < 2) {
				if (i == 1) {
					tempName = tempName + " " + word;
					tempP.setPlayerName(tempName);
				}
				else {
					tempName = word;
				}
			}

			// setting the age of the player
			if (i == 2) {
				string st = word;
				rating = stoi(st);
				tempP.setPlayerAge(rating);
			}

			// setting the inside scoring rating of the player
			if (i == 3) {
				string st = word;
				rating = stoi(st);
				tempP.setPlayerInsideScoringRating(rating);
			}

			// setting the outside scoring rating of the player
			if (i == 4) {
				string st = word;
				rating = stoi(st);
				tempP.setPlayerOutsideScoringRating(rating);
			}

			// setting the free throw rating of the player
			if (i == 5) {
				string st = word;
				rating = stoi(st);
				tempP.setPlayerFreeThrowRating(rating);
			}

			// setting the passing rating of the player
			if (i == 6) {
				string st = word;
				rating = stoi(st);
				tempP.setPlayerPassingRating(rating);
			}

			// setting the rebounding rating of the player
			if (i == 7) {
				string st = word;
				rating = stoi(st);
				tempP.setPlayerReboundingRating(rating);
			}

			// setting the stealing rating of the player
			if (i == 8) {
				string st = word;
				rating = stoi(st);
				tempP.setPlayerStealingRating(rating);
			}

			// setting the blocking rating of the player
			if (i == 9) {
				string st = word;
				rating = stoi(st);
				tempP.setPlayerBlockingRating(rating);
			}

			// setting the defending rating of the player
			if (i == 10) {
				string st = word;
				rating = stoi(st);
				tempP.setPlayerDefendingRating(rating);
			}

			// setting the position of the player
			if (i == 11) {
				tempP.setPlayerPosition(word);
			}

			// setting the salary of the player
			if (i == 12) {
				tempP.setPlayerSalary(word);
			}

			// setting the years pro of the player
			if (i == 13) {
				string st = word;
				rating = stoi(st);
				tempP.setPlayerYearsPro(rating);
			}

			i++;
		}
		gameTeam.addPlayerToTeam(tempP);
	}
}



//=======================================
void startMenu();
void gameManu(string chosenGame);
//=======================================



// Start Menu function for making a league
void makingALeague() {
	fstream fp;
	int chTeam;
	string line;
	int i = 0;
	string teamName;
	int dontLikeTeam;

	string leagueName;
	bool flagDontLikeTeam = false;

	system("cls");
	cout << "Enter your league name: ";
	cin.ignore(1, '\n');
	getline(cin, leagueName);

	// repeating until user likes a team
	do {
		cout << endl << "Pick your Team" << endl;
		fp.open("Teams.txt", ios::in);
		if (fp.is_open()) {
			i = 0;
			while (getline(fp, line)) {
				i++;
				cout << i << " - " << line << endl;
			}
			fp.close();
		}
		cout << "-: ";
		cin >> chTeam;

		switch (chTeam) {
		case 1:
			teamName = "AllTeams/BOS.txt";

			// check if user want this team by showing the roster
			fp.open(teamName, ios::in);
			if (!fp) {
				cout << endl << "******* ERROR *******";
				exit(1);
			}
			if (fp.is_open()) {
				Team tempMenuTeam;
				vector<Player> vtemp;

				fromFileToTeam(teamName, tempMenuTeam);

				cout << endl << "players" << endl << endl;
				vtemp = tempMenuTeam.getTeamPlayers();
				for (auto it = vtemp.begin(); it != vtemp.end(); it++) {
					(*it).showPlayer();
					cout << endl;
				}
				fp.close();
			}

			cout << endl << "Do you like this team? (1-Yes , 0-No): ";
			cin >> dontLikeTeam;

			if (dontLikeTeam == 0) {
				flagDontLikeTeam = true;
				system("cls");
				cout << "Enter your league name: " << endl << leagueName << endl;
			}
			else {

				fs::path pth{ ("Games/" + leagueName) };
				pth /= "_Main_Team_.txt";
				fs::create_directory(pth.parent_path());

				fp.open(pth, ios::out);
				if (!fp) {
					cout << endl << "******* ERROR *******";
					exit(1);
				}
				if (fp.is_open()) {
					fp << "BOS.txt";
					fp.close();
				}

				fs::copy("AllTeams", ("Games/" + leagueName));

				gameManu(leagueName);

				system("pause");
				flagDontLikeTeam = false;
			}
			break;

		case 2: 
			teamName = "AllTeams/BRO.txt";

			// check if user want this team by showing the roster
			fp.open(teamName, ios::in);
			if (!fp) {
				cout << endl << "******* ERROR *******";
				exit(1);
			}
			if (fp.is_open()) {
				Team tempMenuTeam;
				vector<Player> vtemp;

				fromFileToTeam(teamName, tempMenuTeam);

				cout << endl << "players" << endl << endl;
				vtemp = tempMenuTeam.getTeamPlayers();
				for (auto it = vtemp.begin(); it != vtemp.end(); it++) {
					(*it).showPlayer();
					cout << endl;
				}
				fp.close();
			}

			cout << endl << "Do you like this team? (1-Yes , 0-No): ";
			cin >> dontLikeTeam;

			if (dontLikeTeam == 0) {
				flagDontLikeTeam = true;
				system("cls");
				cout << "Enter your league name: " << endl << leagueName << endl;
			}
			else {

				fs::path pth{ ("Games/" + leagueName) };
				pth /= "_Main_Team_.txt";
				fs::create_directory(pth.parent_path());

				fp.open(pth, ios::out);
				if (!fp) {
					cout << endl << "******* ERROR *******";
					exit(1);
				}
				if (fp.is_open()) {
					fp << "BRO.txt";
					fp.close();
				}

				fs::copy("AllTeams", ("Games/" + leagueName));

				gameManu(leagueName);

				system("pause");
				flagDontLikeTeam = false;
			}
			break;

		case 3: break;
		case 4: break;
		case 5: break;

		case 6: 
			
			teamName = "AllTeams/CHI.txt";

			// check if user want this team by showing the roster
			fp.open(teamName, ios::in);
			if (!fp) {
				cout << endl << "******* ERROR *******";
				exit(1);
			}
			if (fp.is_open()) {
				Team tempMenuTeam;
				vector<Player> vtemp;

				fromFileToTeam(teamName, tempMenuTeam);

				cout << endl << "players" << endl << endl;
				vtemp = tempMenuTeam.getTeamPlayers();
				for (auto it = vtemp.begin(); it != vtemp.end(); it++) {
					(*it).showPlayer();
					cout << endl;
				}
				fp.close();
			}

			cout << endl << "Do you like this team? (1-Yes , 0-No): ";
			cin >> dontLikeTeam;

			if (dontLikeTeam == 0) {
				flagDontLikeTeam = true;
				system("cls");
				cout << "Enter your league name: " << endl << leagueName << endl;
			}
			else {

				fs::path pth{ ("Games/" + leagueName) };
				pth /= "_Main_Team_.txt";
				fs::create_directory(pth.parent_path());

				fp.open(pth, ios::out);
				if (!fp) {
					cout << endl << "******* ERROR *******";
					exit(1);
				}
				if (fp.is_open()) {
					fp << "CHI.txt";
					fp.close();
				}

				fs::copy("AllTeams", ("Games/" + leagueName));

				gameManu(leagueName);

				flagDontLikeTeam = false;
			}

			break;

		case 7: break;
		case 8: break;
		case 9: break;
		case 10: break;

		case 11:
			teamName = "AllTeams/ATL.txt";

			// check if user want this team by showing the roster
			fp.open(teamName, ios::in);
			if (!fp) {
				cout << endl << "******* ERROR *******";
				exit(1);
			}
			if (fp.is_open()) {
				Team tempMenuTeam;
				vector<Player> vtemp;

				fromFileToTeam(teamName, tempMenuTeam);

				cout << endl << "players" << endl << endl;
				vtemp = tempMenuTeam.getTeamPlayers();
				for (auto it = vtemp.begin(); it != vtemp.end(); it++) {
					(*it).showPlayer();
					cout << endl;
				}
				fp.close();
			}

			cout << endl << "Do you like this team? (1-Yes , 0-No): ";
			cin >> dontLikeTeam;

			if (dontLikeTeam == 0) {
				flagDontLikeTeam = true;
				system("cls");
				cout << "Enter your league name: " << endl << leagueName << endl;
			}
			else {

				fs::path pth{ ("Games/" + leagueName) };
				pth /= "_Main_Team_.txt";
				fs::create_directory(pth.parent_path());

				fp.open(pth, ios::out);
				if (!fp) {
					cout << endl << "******* ERROR *******";
					exit(1);
				}
				if (fp.is_open()) {
					fp << "ATL.txt";
					fp.close();
				}

				fs::copy("AllTeams", ("Games/" + leagueName));

				gameManu(leagueName);

				flagDontLikeTeam = false;
			}

			break;

		case 12: 
			
			teamName = "AllTeams/CHA.txt";

			// check if user want this team by showing the roster
			fp.open(teamName, ios::in);
			if (!fp) {
				cout << endl << "******* ERROR *******";
				exit(1);
			}
			if (fp.is_open()) {
				Team tempMenuTeam;
				vector<Player> vtemp;

				fromFileToTeam(teamName, tempMenuTeam);

				cout << endl << "players" << endl << endl;
				vtemp = tempMenuTeam.getTeamPlayers();
				for (auto it = vtemp.begin(); it != vtemp.end(); it++) {
					(*it).showPlayer();
					cout << endl;
				}
				fp.close();
			}

			cout << endl << "Do you like this team? (1-Yes , 0-No): ";
			cin >> dontLikeTeam;

			if (dontLikeTeam == 0) {
				flagDontLikeTeam = true;
				system("cls");
				cout << "Enter your league name: " << endl << leagueName << endl;
			}
			else {

				fs::path pth{ ("Games/" + leagueName) };
				pth /= "_Main_Team_.txt";
				fs::create_directory(pth.parent_path());

				fp.open(pth, ios::out);
				if (!fp) {
					cout << endl << "******* ERROR *******";
					exit(1);
				}
				if (fp.is_open()) {
					fp << "CHA.txt";
					fp.close();
				}

				fs::copy("AllTeams", ("Games/" + leagueName));

				gameManu(leagueName);

				flagDontLikeTeam = false;
			}
			
			break;

		case 13: break;
		case 14: break;
		case 15: break;
		case 16: break;
		case 17: break;
		case 18: break;
		case 19: break;
		case 20: break;
		case 21: break;
		case 22: break;
		case 23: break;
		case 24: break;
		case 25: break;
		case 26: break;
		case 27: break;
		case 28: break;
		case 29: break;
		case 30: break;
		} // close team switch

	} while (flagDontLikeTeam == true); // close do while for picking a team
}



// Start Menu functio for continuing game
void continueGame() {
	string gameName;
	bool flagFullDirectoryGames = false;

	system("cls");
	cout << "===== All Your Games =====" << endl;
	for (auto& p : fs::directory_iterator("Games")) {
		if (p.is_directory()) {
			gameName = p.path().string();
			gameName.erase(0, 6);
			cout << gameName << endl;
			flagFullDirectoryGames = true;
		}
	}
	if (flagFullDirectoryGames == false) {
		cout << "Currently you dont have games";
	}
	else {
		string chosenGame;
		cout << endl << "Pick your game by name: ";
		cin.ignore(1, '\n');
		getline(cin, chosenGame);

		for (auto& p : fs::directory_iterator("Games")) {
			if (p.is_directory()) {
				gameName = p.path().string();
				gameName.erase(0, 6);
				if (gameName == chosenGame) {
					gameManu(chosenGame);
				}
			}
		}
	}
}



// Main function
int main() {
	startMenu();
	return 0;
}



// Start Menu function =========
void startMenu() {
	int choice = 0;

	do {
		do {
			system("cls");
			cout << "===========================================" << endl;
			cout << "==================MENU=====================" << endl;
			cout << "1. Make a new League" << endl;
			cout << "2. Continue League" << endl;
			cout << "End" << endl;
			cout << "===========================================" << endl;
			cout << "-: ";
			cin >> choice;
			switch (choice) {

			case 1: // case make a new league
				makingALeague();
				break;

			case 2: // case continue existing game
				continueGame();
				break;

			default: exit(1); break;
			}
		} while (true);
	} while (true);
}


bool sortOvr(Player p1, Player p2) {return p1.getPlayerOverall() > p2.getPlayerOverall();} // support function for sorting
bool compDiff(Player p1, Player p2) { return (p1.getPlayerOverall() == p2.getPlayerOverall()); }
int getPositionNumber(Player p) { string pos = p.getPlayerPosition();
	if (pos == "PG" || pos == "SG" || pos == "SF" || pos == "PF") { return 2; }
	else if (pos == "C/PF" || pos == "PF/C") { return 4; }
	else if (pos == "C") { return 1; }
	else { return 5; }
}

// Game Menu function for showing and modifying the roster
void rosterFunction(Team& myTeam) {
	Team rosterTeam = myTeam;
	vector<Player> vtemp = rosterTeam.getTeamPlayers();
	auto vit = vtemp.end() - 1;
	Player ptemp = (*vit);

	vector<Player> starters;

	sort(vtemp.begin(), vtemp.end(), sortOvr);

	system("cls");
	cout << "--Starters---------------------" << endl;
	for (auto it = vtemp.begin(); it != vtemp.end(); it++) {
		string pos = (*it).getPlayerPosition();
		if (pos == "PG" || pos == "PG/SG") {
			if ((*it).getPlayerOverall() > ptemp.getPlayerOverall()) {
				ptemp = (*it);
			}
		}
	}
	if (ptemp.getPlayerName().length() + 4 < 16) {
		cout << "PG: " << ptemp.getPlayerName() << "\t\t\t" << ptemp.getPlayerAge() << "yo\tOFF: " << ptemp.getCalcPlayerOffence() << " DEF: " << ptemp.getCalcPlayerDefence() << "\t" << ptemp.getPlayerOverall() << " OVR" << endl;
	}
	else if (ptemp.getPlayerName().length() + 4 > 24) {
		cout << "PG: " << ptemp.getPlayerName() << "\t" << ptemp.getPlayerAge() << "yo\tOFF: " << ptemp.getCalcPlayerOffence() << " DEF: " << ptemp.getCalcPlayerDefence() << "\t" << ptemp.getPlayerOverall() << " OVR" << endl;
	}
	else {
		cout << "PG: " << ptemp.getPlayerName() << "\t\t" << ptemp.getPlayerAge() << "yo\tOFF: " << ptemp.getCalcPlayerOffence() << " DEF: " << ptemp.getCalcPlayerDefence() << "\t" << ptemp.getPlayerOverall() << " OVR" << endl;
	}
	starters.push_back(ptemp);

	ptemp = (*vit);
	for (auto it = vtemp.begin(); it != vtemp.end(); it++) {
		string pos = (*it).getPlayerPosition();
		if (pos == "SG" || pos == "SG/PG" || pos == "SG/SF") {
			if ((*it).getPlayerOverall() > ptemp.getPlayerOverall()) {
				ptemp = (*it);
			}
		}
	}
	if (ptemp.getPlayerName().length() + 4 < 16) {
		cout << "SG: " << ptemp.getPlayerName() << "\t\t\t" << ptemp.getPlayerAge() << "yo\tOFF: " << ptemp.getCalcPlayerOffence() << " DEF: " << ptemp.getCalcPlayerDefence() << "\t" << ptemp.getPlayerOverall() << " OVR" << endl;
	}
	else if (ptemp.getPlayerName().length() + 4 > 24) {
		cout << "SG: " << ptemp.getPlayerName() << "\t" << ptemp.getPlayerAge() << "yo\tOFF: " << ptemp.getCalcPlayerOffence() << " DEF: " << ptemp.getCalcPlayerDefence() << "\t" << ptemp.getPlayerOverall() << " OVR" << endl;
	}
	else {
		cout << "SG: " << ptemp.getPlayerName() << "\t\t" << ptemp.getPlayerAge() << "yo\tOFF: " << ptemp.getCalcPlayerOffence() << " DEF: " << ptemp.getCalcPlayerDefence() << "\t" << ptemp.getPlayerOverall() << " OVR" << endl;
	}
	starters.push_back(ptemp);

	ptemp = (*vit);
	for (auto it = vtemp.begin(); it != vtemp.end(); it++) {
		string pos = (*it).getPlayerPosition();
		if (pos == "SF" || pos == "SF/SG" || pos == "SF/PF") {
			if ((*it).getPlayerOverall() > ptemp.getPlayerOverall()) {
				ptemp = (*it);
			}
		}
	}
	if (ptemp.getPlayerName().length() + 4 < 16) {
		cout << "SF: " << ptemp.getPlayerName() << "\t\t\t" << ptemp.getPlayerAge() << "yo\tOFF: " << ptemp.getCalcPlayerOffence() << " DEF: " << ptemp.getCalcPlayerDefence() << "\t" << ptemp.getPlayerOverall() << " OVR" << endl;
	}
	else if (ptemp.getPlayerName().length() + 4 > 24) {
		cout << "SF: " << ptemp.getPlayerName() << "\t" << ptemp.getPlayerAge() << "yo\tOFF: " << ptemp.getCalcPlayerOffence() << " DEF: " << ptemp.getCalcPlayerDefence() << "\t" << ptemp.getPlayerOverall() << " OVR" << endl;
	}
	else {
		cout << "SF: " << ptemp.getPlayerName() << "\t\t" << ptemp.getPlayerAge() << "yo\tOFF: " << ptemp.getCalcPlayerOffence() << " DEF: " << ptemp.getCalcPlayerDefence() << "\t" << ptemp.getPlayerOverall() << " OVR" << endl;
	}
	starters.push_back(ptemp);

	ptemp = (*vit);
	for (auto it = vtemp.begin(); it != vtemp.end(); it++) {
		string pos = (*it).getPlayerPosition();
		if (pos == "PF" || pos == "PF/SF" || pos == "PF/C") {
			if ((*it).getPlayerOverall() > ptemp.getPlayerOverall()) {
				ptemp = (*it);
			}
		}
	}
	if (ptemp.getPlayerName().length() + 4 < 16) {
		cout << "PF: " << ptemp.getPlayerName() << "\t\t\t" << ptemp.getPlayerAge() << "yo\tOFF: " << ptemp.getCalcPlayerOffence() << " DEF: " << ptemp.getCalcPlayerDefence() << "\t" << ptemp.getPlayerOverall() << " OVR" << endl;
	}
	else if (ptemp.getPlayerName().length() + 4 > 24) {
		cout << "PF: " << ptemp.getPlayerName() << "\t" << ptemp.getPlayerAge() << "yo\tOFF: " << ptemp.getCalcPlayerOffence() << " DEF: " << ptemp.getCalcPlayerDefence() << "\t" << ptemp.getPlayerOverall() << " OVR" << endl;
	}
	else {
		cout << "PF: " << ptemp.getPlayerName() << "\t\t" << ptemp.getPlayerAge() << "yo\tOFF: " << ptemp.getCalcPlayerOffence() << " DEF: " << ptemp.getCalcPlayerDefence() << "\t" << ptemp.getPlayerOverall() << " OVR" << endl;
	}
	starters.push_back(ptemp);

	ptemp = (*vit);
	for (auto it = vtemp.begin(); it != vtemp.end(); it++) {
		string pos = (*it).getPlayerPosition();
		if (pos == "C" || pos == "C/PF") {
			if ((*it).getPlayerOverall() > ptemp.getPlayerOverall()) {
				ptemp = (*it);
			}
		}
	}
	if (ptemp.getPlayerName().length() + 3 < 16) {
		cout << "C: " << ptemp.getPlayerName() << "\t\t\t" << ptemp.getPlayerAge() << "yo\tOFF: " << ptemp.getCalcPlayerOffence() << " DEF: " << ptemp.getCalcPlayerDefence() << "\t" << ptemp.getPlayerOverall() << " OVR" << endl;
	}
	else if (ptemp.getPlayerName().length() + 3 > 24) {
		cout << "C: " << ptemp.getPlayerName() << "\t" << ptemp.getPlayerAge() << "yo\tOFF: " << ptemp.getCalcPlayerOffence() << " DEF: " << ptemp.getCalcPlayerDefence() << "\t" << ptemp.getPlayerOverall() << " OVR" << endl;
	}
	else {
		cout << "C: " << ptemp.getPlayerName() << "\t\t" << ptemp.getPlayerAge() << "yo\tOFF: " << ptemp.getCalcPlayerOffence() << " DEF: " << ptemp.getCalcPlayerDefence() << "\t" << ptemp.getPlayerOverall() << " OVR" << endl;
	}
	starters.push_back(ptemp);

	vector<Player> bench = vtemp;

	auto pred = [&starters](const Player& pl) ->bool {
		return find(starters.begin(), starters.end(), pl) != starters.end();
	};
	bench.erase(remove_if(bench.begin(), bench.end(), pred), bench.end());

	sort(bench.begin(), bench.end(), sortOvr);

	cout << endl << "--Bench------------------------" << endl;
	for (auto it = bench.begin(); it != bench.end(); it++) {
		Player pl = (*it);
		int pnum = getPositionNumber(pl) + 2;

		if ((*it).getPlayerName().length() + pnum <= 16) {
			cout << (*it).getPlayerPosition() << ": " << (*it).getPlayerName() << "\t\t\t" << (*it).getPlayerAge() << "yo\tOFF: " << (*it).getCalcPlayerOffence() << "\tDEF: " << (*it).getCalcPlayerDefence() << "\t" << (*it).getPlayerOverall() << " OVR" << endl;
		}
		else if ((*it).getPlayerName().length() + pnum > 24) {
			cout << (*it).getPlayerPosition() << ": " << (*it).getPlayerName() << "\t" << (*it).getPlayerAge() << "yo\tOFF: " << (*it).getCalcPlayerOffence() << "\tDEF: " << (*it).getCalcPlayerDefence() << "\t" << (*it).getPlayerOverall() << " OVR" << endl;
		}
		else {
			cout << (*it).getPlayerPosition() << ": " << (*it).getPlayerName() << "\t\t" << (*it).getPlayerAge() << "yo\tOFF: " << (*it).getCalcPlayerOffence() << "\tDEF: " << (*it).getCalcPlayerDefence() << "\t" << (*it).getPlayerOverall() << " OVR" << endl;
		}
	}

	system("pause");
}



bool sortSal(Player p1, Player p2) {
	double p1s, p2s;
	string sal;

	sal = p1.getPlayerSalary();
	sal.erase(0, 2);
	p1s = stod(sal);

	sal = p2.getPlayerSalary();
	sal.erase(0, 2);
	p2s = stod(sal);

	return p1s > p2s;
}

// Game Manu function for showing the finances of the team
void showFinances(Team& myTeam) {
	Team finTeam = myTeam;
	vector<Player> vtemp = finTeam.getTeamPlayers();

	sort(vtemp.begin(), vtemp.end(), sortSal);

	system("cls");
	for (auto it = vtemp.begin(); it != vtemp.end(); it++) {
		if ((*it).getPlayerName().length() <= 15) {
			cout << (*it).getPlayerName() << "\t\t" << (*it).getPlayerOverall() << " OVR -\t" << (*it).salaryForFinances() << endl;
		}
		else {
			cout << (*it).getPlayerName() << "\t" << (*it).getPlayerOverall() << " OVR -\t" << (*it).salaryForFinances() << endl;
		}
	}
	cout << "------------------------------------------------------------------------" << endl;
	cout << finTeam.getTeamName() << " - " << finTeam.salaryForFinances() << endl << endl;

	system("pause");
}



bool compSeasonTeam(Team t1, Team t2) {
	return t1.getTeamLoses() < t2.getTeamLoses();
}
bool compEmptyTeam(Team t1, Team t2) {
	return t1.getTeamCalcOverall() > t2.getTeamCalcOverall();
}

//Game Menu function for showing the standings
void showTeamStandings(int day, vector<Team>& vtemp) {
	system("cls");
	vector<Team>& tvec = vtemp;

	cout << "Team\tWins\tLoses" << endl;
	cout << "-------------------" << endl;
	if (day == 0) {
		sort(tvec.begin(), tvec.end(), compEmptyTeam);
		for (auto it = tvec.begin(); it != tvec.end(); it++) {
			cout << (*it).getTeamName() << "\t" << (*it).getTeamWins() << "\t" << (*it).getTeamLoses() << endl;
		}
	}
	else {
		sort(tvec.begin(), tvec.end(), compSeasonTeam);
		for (auto it = tvec.begin(); it != tvec.end(); it++) {
			cout << (*it).getTeamName() << "\t" << (*it).getTeamWins() << "\t" << (*it).getTeamLoses() << endl;
		}
	}

	system("pause");
}



// Game Menu function for showing the player standings by overall
void showPlayerStandings(int ch, vector<Team> vtemp) {
	system("cls");
	vector<Player> pvec;
	vector<Team> tvec = vtemp;

	// showing rookie standings
	if (ch == 1) {
		for (auto it_t = tvec.begin(); it_t != tvec.end(); it_t++) {
			vector<Player> ptemp = (*it_t).getTeamPlayers();
			for (auto it_p = ptemp.begin(); it_p != ptemp.end(); it_p++) {
				Player p = (*it_p);
				if (p.getPlayerYearsPro() == 1) {
					pvec.push_back(p);
				}
			}
		}

		sort(pvec.begin(), pvec.end(), sortOvr);
		cout << "--Player Rookie----------------------" << endl;
		int i = 1;
		int iSize = 0;
		for (auto it = pvec.begin(); it != pvec.end(); it++) {
			if (i < 10) { iSize = 1; }
			else { iSize = 2; }

			if ((*it).getPlayerName().length() + iSize + 2 > 23) {
				cout << i << ". " << (*it).getPlayerName() << "\t" << (*it).getPlayerAge() << "\t" << (*it).getPlayerOverall() << " OVR" << "\tOFF: " << (*it).getCalcPlayerOffence() << "\tDIF: " << (*it).getCalcPlayerDefence() << endl;
			}
			else if ((*it).getPlayerName().length() + iSize + 2 < 16) {
				cout << i << ". " << (*it).getPlayerName() << "\t\t\t" << (*it).getPlayerAge() << "\t" << (*it).getPlayerOverall() << " OVR" << "\tOFF: " << (*it).getCalcPlayerOffence() << "\tDIF: " << (*it).getCalcPlayerDefence() << endl;
			}
			else {
				cout << i << ". " << (*it).getPlayerName() << "\t\t" << (*it).getPlayerAge() << "\t" << (*it).getPlayerOverall() << " OVR" << "\tOFF: " << (*it).getCalcPlayerOffence() << "\tDIF: " << (*it).getCalcPlayerDefence() << endl;
			}

			i++;
		}
	}
	// showing sophomore standings
	if (ch == 2) {
		for (auto it_t = tvec.begin(); it_t != tvec.end(); it_t++) {
			vector<Player> ptemp = (*it_t).getTeamPlayers();
			for (auto it_p = ptemp.begin(); it_p != ptemp.end(); it_p++) {
				Player p = (*it_p);
				if (p.getPlayerYearsPro() == 2) {
					pvec.push_back(p);
				}
			}
		}

		sort(pvec.begin(), pvec.end(), sortOvr);
		cout << "--Player Sophomore----------------------" << endl;
		int i = 1;
		int iSize = 0;
		for (auto it = pvec.begin(); it != pvec.end(); it++) {
			if (i < 10) { iSize = 1; }
			else { iSize = 2; }

			if ((*it).getPlayerName().length() + iSize + 2 > 23) {
				cout << i << ". " << (*it).getPlayerName() << "\t" << (*it).getPlayerAge() << "\t" << (*it).getPlayerOverall() << " OVR" << "\tOFF: " << (*it).getCalcPlayerOffence() << "\tDIF: " << (*it).getCalcPlayerDefence() << endl;
			}
			else if ((*it).getPlayerName().length() + iSize + 2 < 16) {
				cout << i << ". " << (*it).getPlayerName() << "\t\t\t" << (*it).getPlayerAge() << "\t" << (*it).getPlayerOverall() << " OVR" << "\tOFF: " << (*it).getCalcPlayerOffence() << "\tDIF: " << (*it).getCalcPlayerDefence() << endl;
			}
			else {
				cout << i << ". " << (*it).getPlayerName() << "\t\t" << (*it).getPlayerAge() << "\t" << (*it).getPlayerOverall() << " OVR" << "\tOFF: " << (*it).getCalcPlayerOffence() << "\tDIF: " << (*it).getCalcPlayerDefence() << endl;
			}

			i++;
		}
	}
	// showing all players standings
	if (ch == 3) {
		for (auto it_t = tvec.begin(); it_t != tvec.end(); it_t++) {
			vector<Player> ptemp = (*it_t).getTeamPlayers();
			for (auto it_p = ptemp.begin(); it_p != ptemp.end(); it_p++) {
				Player p = (*it_p);
				pvec.push_back(p);
			}
		}

		sort(pvec.begin(), pvec.end(), sortOvr);
		cout << "--Player Standings----------------------" << endl;
		int i = 1;
		int iSize = 0;
		for (auto it = pvec.begin(); it != pvec.end(); it++) {
			if (i < 10) { iSize = 1; }
			else { iSize = 2; }

			if ((*it).getPlayerName().length() + iSize + 2 > 23) {
				cout << i << ". " << (*it).getPlayerName() << "\t" << (*it).getPlayerAge() << "\t" << (*it).getPlayerOverall() << " OVR" << "\tOFF: " << (*it).getCalcPlayerOffence() << "\tDIF: " << (*it).getCalcPlayerDefence() << endl;
			}
			else if ((*it).getPlayerName().length() + iSize + 2 < 16) {
				cout << i << ". " << (*it).getPlayerName() << "\t\t\t" << (*it).getPlayerAge() << "\t" << (*it).getPlayerOverall() << " OVR" << "\tOFF: " << (*it).getCalcPlayerOffence() << "\tDIF: " << (*it).getCalcPlayerDefence() << endl;
			}
			else {
				cout << i << ". " << (*it).getPlayerName() << "\t\t" << (*it).getPlayerAge() << "\t" << (*it).getPlayerOverall() << " OVR" << "\tOFF: " << (*it).getCalcPlayerOffence() << "\tDIF: " << (*it).getCalcPlayerDefence() << endl;
			}

			i++;
		}
	}

	system("pause");
}



// Game Menu function when you enter a started game
void gameManu(string chosenGame) {
	Team myTeam;
	fstream gameFile;
	string gamePath = "Games/" + chosenGame;
	string line;

	fs::path pth{ ("Games/" + chosenGame) };
	pth /= "_Main_Team_.txt";

	gameFile.open(pth, ios::in);
	if (!gameFile) {
		cout << endl << "******* ERROR *******";
		exit(1);
	}
	if (gameFile.is_open()) {
		getline(gameFile, line);

		fs::path tempPth{ ("Games/" + chosenGame) };
		tempPth /= line;

		fromFileToTeam(tempPth.string(), myTeam);
		gameFile.close();
	}

	int days = 0;
	vector<Team> tvec;
	for (auto& p : fs::directory_iterator("Games/" + chosenGame)) {
		if (p.is_regular_file()) {
			Team tempT;
			string str = p.path().filename().string();
			if (str != "_Main_Team_.txt") {
				fromFileToTeam(p.path().string(), tempT);
				tvec.push_back(tempT);
			}
		}
	}

	int choice = 0;
	do {
		do {
			system("cls");
			cout << "===========================================" << endl;
			cout << "==================MENU=====================" << endl;
			cout << "---Play------------------------------" << endl;
			cout << "1. Progress One Day" << endl;
			cout << "2. Progress One Week" << endl;
			cout << "3. Progress One Month" << endl;
			cout << "4. Progress in Time" << endl;
			cout << "---Management------------------------" << endl;
			cout << "5. Roster" << endl;
			cout << "6. Team Standings" << endl;
			cout << "7. Progress in Time" << endl;
			cout << "8. View opponent" << endl;
			cout << "9. News" << endl;
			cout << "---Market----------------------------" << endl;
			cout << "10. Draft" << endl;
			cout << "11. Free Agency" << endl;
			cout << "12. Tradeing" << endl;
			cout << "13. Finances" << endl;
			cout << "--Top--------------------------------" << endl;
			cout << "14. Players Standing" << endl;
			cout << "15. Sophomores Standing" << endl;
			cout << "16. Rookie Standing" << endl;
			cout << "--Statistics-------------------------" << endl;
			cout << "17. Players Stats" << endl;
			cout << "18. Sophomores Stats" << endl;
			cout << "19. Rookie Stats" << endl;
			cout << "20. History" << endl;
			cout << "--Other------------------------------" << endl;
			cout << "21. Back to Manu" << endl;
			cout << "End" << endl;
			cout << "===========================================" << endl;
			cout << "-: ";
			cin >> choice;
			switch (choice) {
			case 1:
				
				break;

			case 2:
				
				break;

			case 3:

				break;

			case 4:

				break;

			case 5:
				rosterFunction(myTeam);
				break;

			case 6:
				showTeamStandings(days, tvec);
				break; 
			
			case 7:

				break;

			case 8:
				
				break;

			case 9:
				
				break;

			case 10:
				
				break;

			case 11:

				break;

			case 12:

				break;

			case 13:
				showFinances(myTeam);
				break;

			case 14:
				showPlayerStandings(3, tvec);
				break;

			case 15:
				showPlayerStandings(2, tvec);
				break;

			case 16:
				showPlayerStandings(1, tvec);
				break;

			case 17:

				break;

			case 18:

				break;

			case 19:

				break;

			case 20:

				break;

			case 21:
				return;
				break;

			default: exit(1); break;
			}
		} while (true);
	} while (true);

}